Open/Closed Principle (OCP)


As stated by Bertrand Meyer, "software entities (classes, modules, functions, etc.) should be open for extension,
but closed for modification." What does that mean though? This principle basically states that you should allow 
users to add new functionalities without changing existing code.

Bad:

abstract class AdapterBase
{
    protected string Name;

    public string GetName()
    {
        return Name;
    }
}

class AjaxAdapter : AdapterBase
{
    public AjaxAdapter()
    {
        Name = "ajaxAdapter";
    }
}

class NodeAdapter : AdapterBase
{
    public NodeAdapter()
    {
        Name = "nodeAdapter";
    }
}

class HttpRequester : AdapterBase
{
    private readonly AdapterBase Adapter;

    public HttpRequester(AdapterBase adapter)
    {
        Adapter = adapter;
    }

    public bool Fetch(string url)
    {
        var adapterName = Adapter.GetName();

        if (adapterName == "ajaxAdapter")
        {
            return MakeAjaxCall(url);
        }
        else if (adapterName == "httpNodeAdapter")
        {
            return MakeHttpCall(url);
        }
    }

    private bool MakeAjaxCall(string url)
    {
        // request and return promise
    }

    private bool MakeHttpCall(string url)
    {
        // request and return promise
    }
}


<MY NOTE>

If new technology call is need then the class HttpRequester is changed.
To solve this IAdapter is created and extend from technology call.
Thus HttpRequester only invoke Request method inner from IAdapter.


Good:

CODE IN MODEL
